diff -r -u -E kendryte-standalone-sdk/lib/drivers/dvp.c kendryte/lib/drivers/dvp.c
--- kendryte-standalone-sdk/lib/drivers/dvp.c	2018-10-26 13:42:14.109489584 +0800
+++ kendryte/lib/drivers/dvp.c	2018-10-25 22:22:42.985657618 +0800
@@ -103,7 +103,7 @@
     return (uint8_t) DVP_SCCB_RDATA_BYTE(dvp->sccb_cfg);
 }
 
-static void dvp_reset(void)
+void dvp_reset(void)
 {
     /* First power down */
     dvp->cmos_cfg |= DVP_CMOS_POWER_DOWN;
diff -r -u -E kendryte-standalone-sdk/lib/drivers/include/dvp.h kendryte/lib/drivers/include/dvp.h
--- kendryte-standalone-sdk/lib/drivers/include/dvp.h	2018-10-26 13:42:14.109489584 +0800
+++ kendryte/lib/drivers/include/dvp.h	2018-10-25 22:22:42.985657618 +0800
@@ -244,6 +244,9 @@
  */
 void dvp_set_output_enable(dvp_output_mode_t index, int enable);
 
+void dvp_reset(void);
+
+
 #ifdef __cplusplus
 }
 #endif
diff -r -u -E kendryte-standalone-sdk/lib/drivers/include/timer.h kendryte/lib/drivers/include/timer.h
--- kendryte-standalone-sdk/lib/drivers/include/timer.h	2018-10-26 13:42:14.113489433 +0800
+++ kendryte/lib/drivers/include/timer.h	2018-10-25 22:22:42.985657618 +0800
@@ -120,7 +120,26 @@
  * @param[in]   enable      Enable or disable
  *
  */
+ 
+void timer_enable(timer_device_number_t timer_number, timer_channel_number_t channel);
+void timer_disable(timer_device_number_t timer_number, timer_channel_number_t channel);
+
+void timer_set_mode(timer_device_number_t timer_number, timer_channel_number_t channel, uint32_t mode);
 void timer_set_enable(timer_device_number_t timer_number, timer_channel_number_t channel, uint32_t enable);
+void timer_set_clock_div(timer_device_number_t timer_number, uint32_t div);
+void timer_set_reload(timer_device_number_t timer_number, timer_channel_number_t channel, uint32_t count);
+
+uint32_t timer_get_reload(timer_device_number_t timer_number, timer_channel_number_t channel);
+uint32_t timer_get_count(timer_device_number_t timer_number, timer_channel_number_t channel);
+
+
+void timer_enable_interrupt(timer_device_number_t timer_number, timer_channel_number_t channel);
+void timer_channel_clear_interrupt(timer_device_number_t timer_number, timer_channel_number_t channel);
+
+
+
+
+
 
 #ifdef __cplusplus
 }
diff -r -u -E kendryte-standalone-sdk/lib/drivers/include/uarths.h kendryte/lib/drivers/include/uarths.h
--- kendryte-standalone-sdk/lib/drivers/include/uarths.h	2018-10-26 13:42:14.113489433 +0800
+++ kendryte/lib/drivers/include/uarths.h	2018-10-25 22:22:42.985657618 +0800
@@ -285,6 +285,12 @@
  */
 void uarths_set_interrupt_cnt(uarths_interrupt_mode_t interrupt_mode, uint8_t cnt);
 
+int on_irq_uarths_recv(void *param);
+
+int read_ringbuff(char *rdata, size_t len);
+int write_ringbuff(uint8_t rdata);
+
+
 #ifdef __cplusplus
 }
 #endif
diff -r -u -E kendryte-standalone-sdk/lib/drivers/uarths.c kendryte/lib/drivers/uarths.c
--- kendryte-standalone-sdk/lib/drivers/uarths.c	2018-10-26 13:42:14.113489433 +0800
+++ kendryte/lib/drivers/uarths.c	2018-10-25 22:22:42.985657618 +0800
@@ -18,8 +18,57 @@
 #include "uarths.h"
 #include "sysctl.h"
 #include "encoding.h"
-
+#include "atomic.h"
+#include "malloc.h"
 volatile uarths_t *const uarths = (volatile uarths_t *)UARTHS_BASE_ADDR;
+int pos = 0;
+#define RING_BUFF_LEN 1024U
+
+typedef struct _ring_buff_t
+{
+    size_t head;
+    size_t tail;
+    size_t length;
+    char ring_buff[RING_BUFF_LEN];
+} ring_buff_t;
+ring_buff_t *ring_recv_hs = NULL;
+
+int write_ringbuff(uint8_t rdata)
+{
+    ring_buff_t *rb = ring_recv_hs;
+
+    if (rb->length >= RING_BUFF_LEN)
+    {
+        return -1;
+    }
+    rb->ring_buff[rb->tail] = rdata;
+    rb->tail = (rb->tail + 1) % RING_BUFF_LEN;
+    atomic_add(&rb->length, 1);
+    return ;
+}
+
+int read_ringbuff(char *rdata, size_t len)
+{
+    ring_buff_t *rb = ring_recv_hs;
+    size_t cnt = 0;
+    while((len--) && rb->length)
+    {
+        *(rdata++) = rb->ring_buff[rb->head];
+        rb->head = (rb->head + 1) % RING_BUFF_LEN;
+        atomic_add(&rb->length, -1);
+        cnt++;
+    }
+    return cnt;
+}
+int on_irq_uarths_recv(void *param)
+{
+
+	pos++;
+	uarths_rxdata_t recv = uarths->rxdata;
+	while(recv.empty);
+	write_ringbuff(((uint8_t)(recv.data & 0xFF)));
+	return 0;
+}
 
 typedef struct _uarths_context
 {
@@ -164,6 +213,12 @@
     uarths->ip.rxwm = 1;
     uarths->ie.txwm = 0;
     uarths->ie.rxwm = 1;
+
+	ring_buff_t *rb = malloc(sizeof(ring_buff_t));
+    rb->head = 0;
+    rb->tail = 0;
+    rb->length = 0;
+    ring_recv_hs = rb;
 }
 
 void uarths_config(uint32_t baud_rate, uarths_stopbit_t stopbit)
